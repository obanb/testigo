"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const S = require("fp-ts/lib/State");
const pipeable_1 = require("fp-ts/lib/pipeable");
const appLog = {
    running: false,
    completed: false,
    result: 0
};
// export interface State<S, A> {
//     (s: S): [A, S]
// }
const initProcess = (initValue) => (log) => {
    const logVersion = { ...log, running: true };
    return [initValue, logVersion];
};
const completeProcess = (initValue) => (log) => {
    const logVersion = { ...log, running: false, completed: true, result: initValue };
    return [initValue, logVersion];
};
exports.map = (f) => (fa) => (s1) => {
    const [a, s2] = fa(s1);
    return [f(a), s2];
};
exports.map3 = (f) => (fa) => {
    console.log(`iterace`);
    return (s1) => {
        console.log(`${s1}`);
        const [a, s2] = fa(s1);
        return [f(a), s2];
    };
};
// kazda iterace vrati vysledekpredchoziho state =, z ktereho vezme A a zavola na nej funkci a zaroven predchozi state
// s1 zatim nema hodnotu, lazy ceka
exports.map2 = (f) => (fa) => (s1) => {
    const [a, s2] = fa(s1);
    return [f(a), s2];
};
const double = (number) => number * 2;
const tripple = (number) => number * 3;
const test = exports.map(double)(completeProcess(10));
// step 1
//  const step1 = completeProcess(10)(10);
// [10, log]
// (10) => [double(10), log]
// next
const result = () => pipeable_1.pipe(initProcess(10), exports.map3(double), exports.map3(tripple), S.chain(completeProcess));
const fakeState = (number) => (state) => {
    const operation = number * 2;
    return [operation, state];
};
const fakeState2 = (num) => (state) => {
    const operation = num * 2;
    return [operation, state];
};
const res = pipeable_1.pipe(fakeState(3), S.chain(fakeState2))('pes');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kdWxlcy9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQUNyQyxpREFBd0M7QUF1QnhDLE1BQU0sTUFBTSxHQUFRO0lBQ2hCLE9BQU8sRUFBRSxLQUFLO0lBQ2QsU0FBUyxFQUFFLEtBQUs7SUFDaEIsTUFBTSxFQUFFLENBQUM7Q0FDWixDQUFBO0FBRUQsaUNBQWlDO0FBQ2pDLHFCQUFxQjtBQUNyQixJQUFJO0FBR0osTUFBTSxXQUFXLEdBQUcsQ0FBZ0IsU0FBaUIsRUFBcUIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDakYsTUFBTSxVQUFVLEdBQUcsRUFBQyxHQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUE7SUFDMUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUNsQyxDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxDQUFnQixTQUFpQixFQUFzQixFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUN0RixNQUFNLFVBQVUsR0FBRyxFQUFDLEdBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUE7SUFDL0UsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUNsQyxDQUFDLENBQUM7QUFFVyxRQUFBLEdBQUcsR0FBRyxDQUFNLENBQWEsRUFBRSxFQUFFLENBQUMsQ0FBSSxFQUFnQixFQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUNyRixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUVZLFFBQUEsSUFBSSxHQUFHLENBQU0sQ0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFJLEVBQWdCLEVBQWdCLEVBQUU7SUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QixPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3JCLENBQUMsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUVELHNIQUFzSDtBQUN0SCxtQ0FBbUM7QUFFdEIsUUFBQSxJQUFJLEdBQXNFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtJQUN6RyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ3JCLENBQUMsQ0FBQTtBQUdELE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQzlDLE1BQU0sT0FBTyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRS9DLE1BQU0sSUFBSSxHQUFHLFdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUU5QyxTQUFTO0FBQ1QsMENBQTBDO0FBQzFDLFlBQVk7QUFFWiw0QkFBNEI7QUFFNUIsT0FBTztBQUtQLE1BQU0sTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGVBQUksQ0FDckIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUNmLFlBQUksQ0FBQyxNQUFNLENBQUMsRUFDWixZQUFJLENBQUMsT0FBTyxDQUFDLEVBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FDM0IsQ0FBQTtBQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQWEsRUFBb0IsRUFBRTtJQUN0RSxNQUFNLFNBQVMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDN0IsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUksQ0FBQyxHQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBYSxFQUFvQixFQUFFO0lBQ3BFLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDMUIsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUM3QixDQUFDLENBQUE7QUFFRCxNQUFNLEdBQUcsR0FBRyxlQUFJLENBQ1gsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUNaLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQ3ZCLENBQUMsS0FBSyxDQUFDLENBQUEifQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pipeable_1 = require("fp-ts/lib/pipeable");
const Apply_1 = require("fp-ts/lib/Apply");
const O = require("fp-ts/lib/Option");
const E = require("fp-ts/lib/Either");
/**
 *  multiple either left semigroup concat throw sequenceT extended applicative apply
 */
exports.validateRegisterAccountInput = (input) => {
    return pipeable_1.pipe(Apply_1.sequenceT(eitherLeftConcat(getSemigroupArray()))(exports.validateName(input), exports.validateSurname(input)), E.map(() => input));
};
exports.validateName = (input) => pipeable_1.pipe(input, O.fromNullable, O.mapNullable((inp) => inp.name), E.fromOption(() => ['missing name']), E.chain((title) => (title.length > 30 ? E.left(['maximum 30 characters']) : E.right(input))));
exports.validateSurname = (input) => pipeable_1.pipe(input, O.fromNullable, O.mapNullable((inp) => inp.surname), E.fromOption(() => ['missing description']), E.chain((description) => (description.length > 100 ? E.left(['maximum 100 characters']) : E.right(input))));
/**
 * extended applicative for apply inside sequence/sequenceT for semigroup concat of either left sides
 */
const eitherLeftConcat = (semi) => ({
    URI: E.URI,
    _E: undefined,
    map: E.either.map,
    of: E.either.of,
    ap: (mab, ma) => (E.isLeft(mab) ? (E.isLeft(ma) ? E.left(semi.concat(mab.left, ma.left)) : mab) : E.isLeft(ma) ? ma : E.right(mab.right(ma.right))),
    chain: E.either.chain,
});
const getSemigroupArray = () => ({
    concat: (x, y) => [...x, ...y],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudFZhbGlkYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9jb3JlL2FjY291bnRWYWxpZGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUF3QztBQUN4QywyQ0FBMEM7QUFHMUMsc0NBQXNDO0FBQ3RDLHNDQUFzQztBQUl0Qzs7R0FFRztBQUNVLFFBQUEsNEJBQTRCLEdBQUcsQ0FBQyxLQUEyQixFQUE0QyxFQUFFO0lBQ2xILE9BQU8sZUFBSSxDQUNQLGlCQUFTLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLEVBQVUsQ0FBQyxDQUFDLENBQUMsb0JBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSx1QkFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ3JHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQ3JCLENBQUM7QUFDTixDQUFDLENBQUM7QUFFVyxRQUFBLFlBQVksR0FBRyxDQUFDLEtBQTJCLEVBQTRDLEVBQUUsQ0FDbEcsZUFBSSxDQUNBLEtBQUssRUFDTCxDQUFDLENBQUMsWUFBWSxFQUNkLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFDaEMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvRixDQUFDO0FBRU8sUUFBQSxlQUFlLEdBQUUsQ0FBQyxLQUEyQixFQUE0QyxFQUFFLENBQ3BHLGVBQUksQ0FDQSxLQUFLLEVBQ0wsQ0FBQyxDQUFDLFlBQVksRUFDZCxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQ25DLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQzNDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUM3RyxDQUFDO0FBRU47O0dBRUc7QUFFSCxNQUFNLGdCQUFnQixHQUFHLENBQVMsSUFBeUIsRUFBbUMsRUFBRSxDQUFDLENBQUM7SUFDOUYsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHO0lBQ1YsRUFBRSxFQUFFLFNBQWdCO0lBQ3BCLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUc7SUFDakIsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRTtJQUNmLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ25KLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUs7Q0FDeEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQkFBaUIsR0FBRyxHQUFzQixFQUFFLENBQUMsQ0FBQztJQUNoRCxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ2pDLENBQUMsQ0FBQyJ9